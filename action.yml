name: "ioBroker Testing: Deploy"
author: "AlCalzone"
#description: 'Greet someone'

inputs:
  node-version:
    description: "Node.js version"
    required: true
  install-command:
    description: "Overwrite the default install command"
    default: "npm ci"
  package-cache:
    description: "Define which package manager to use for dependency caching. Set to 'false' to disable caching."
    default: 'npm'
  build:
    description: "Set to true when the adapter needs a build step"
    default: false
  build-command:
    description: "Overwrite the default build command"
    default: "npm run build"
  npm-token:
    description: "The token to use to publish to npm"
    required: true
  github-token:
    description: "The token to use to create a GitHub release"
    required: true

  sentry:
    description: "Enable Sentry releases integration"
    default: false
  sentry-token:
    description: "The token to use to create a Sentry release"
    default: false
  sentry-url:
    description: "Under which URL the Sentry instance is running"
    default: "https://sentry.iobroker.net"
  sentry-org:
    description: "Which Sentry organization the project is under"
    default: "iobroker"
  sentry-project:
    description: "The project name on Sentry"
    default: false
  sentry-version-prefix:
    description: "The prefix for release versions on Sentry"
    default: false
  sentry-github-integration:
    description: "Set to true once Github integration is set up in Sentry"
    default: false
  sentry-sourcemap-paths:
    description: "If sourcemaps should be uploaded to Sentry, specify their path here"
    default: false

# Conditional syntax isn't supported, but there are workarounds:
# https://github.com/actions/runner/issues/834#issuecomment-909921245

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ inputs.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: ${{ (inputs.package-cache != 'false' && inputs.package-cache != '') && inputs.package-cache || '' }}

    - name: Extract the version and commit body from the tag
      shell: bash
      id: extract_release
      # The body may be multiline, therefore newlines and % need to be escaped
      run: |
        VERSION="${{ github.ref }}"
        VERSION=${VERSION##*/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        EOF=$(od -An -N6 -x /dev/urandom | tr -d ' ')
        BODY=$(git show -s --format=%b)
        echo "BODY<<$EOF" >> $GITHUB_OUTPUT
        echo "$BODY" >> $GITHUB_OUTPUT
        echo "$EOF" >> $GITHUB_OUTPUT
        if [[ $VERSION == *"-"* ]] ; then
          echo "TAG=--tag next" >> $GITHUB_OUTPUT
        fi

    - name: Install Dependencies
      shell: bash
      run: ${{ inputs.install-command }}

    - name: Create a clean build
      shell: bash
      run: |
        if ${{ inputs.build }}; then
          ${{ inputs.build-command }}
        else
          echo "Skipping build step..."
        fi

    - name: Publish package to npm
      shell: bash
      run: |
        npm config set //registry.npmjs.org/:_authToken=${{ inputs.npm-token }}
        npm whoami
        npm publish ${{ steps.extract_release.outputs.TAG }}

    - name: Create Github Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      with:
        tag_name: ${{ github.ref }}
        name: Release v${{ steps.extract_release.outputs.VERSION }}
        draft: false
        # Prerelease versions create prereleases on Github
        prerelease: ${{ contains(steps.extract_release.outputs.VERSION, '-') }}
        body: ${{ steps.extract_release.outputs.BODY }}

    - name: Create Sentry release
      shell: bash
      run: |
        if ! ${{ inputs.sentry }}; then
          echo "Sentry release disabled..."
          exit 0
        fi

        if [[ "${{ inputs.sentry-token }}" == "false" ]] ; then
          echo "::error::Required input sentry-token not provided!"
          exit 1
        fi
        if [[ "${{ inputs.sentry-project }}" == "false" ]] ; then
          echo "::error::Required input sentry-project not provided!"
          exit 1
        fi
        if [[ "${{ inputs.sentry-version-prefix }}" == "false" ]] ; then
          echo "::error::Required input sentry-version-prefix not provided!"
          exit 1
        fi

        npm i -g @sentry/cli

        export SENTRY_AUTH_TOKEN=${{ inputs.sentry-token }}
        export SENTRY_URL=${{ inputs.sentry-url }}
        export SENTRY_ORG=${{ inputs.sentry-org }}
        export SENTRY_PROJECT=${{ inputs.sentry-project }}
        export SENTRY_VERSION=${{ inputs.sentry-version-prefix }}@${{ steps.extract_release.outputs.VERSION }}
        sentry-cli releases new $SENTRY_VERSION

        if ${{ inputs.sentry-github-integration }}; then
          sentry-cli releases set-commits $SENTRY_VERSION --auto
        fi

        if [[ "${{ inputs.sentry-sourcemap-paths }}" != "false" ]] ; then
          sentry-cli releases files $SENTRY_VERSION upload-sourcemaps ${{ inputs.sentry-sourcemap-paths }}
        fi

        sentry-cli releases finalize $SENTRY_VERSION
